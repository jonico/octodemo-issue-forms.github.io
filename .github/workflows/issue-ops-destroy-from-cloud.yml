on:
  issues:
    types: [closed]
name: Destroy from cloud
jobs:
  destroy-from-cloud:
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, 'Deploy Octocat Generator on')
    steps:
      - name: Run Issue form parser
        id: parse
        uses: peter-murray/issue-forms-body-parser@v1.0.0
        with:
          issue_id: ${{ github.event.issue.number }}
          separator: '###'
          label_marker_start: ' '
          label_marker_end: ' '
      - name: Destroying deployment
        uses: actions/github-script@v3
        env:
          title: ${{ github.event.issue.title }}
          body: ${{ github.event.issue.body }}
          labels: ${{ toJSon(github.event.issue.labels) }}
          ISSUE_PAYLOAD: ${{ steps.parse.outputs.payload }}
        with:
          github-token: ${{secrets.GPR_PAT}}
          script: |
            const { title, body, labels } = process.env;
            const existingLabels = JSON.parse(labels)
            const label = "deployed"
            if (!existingLabels.some(({ name: existingLabelName }) => existingLabelName === label)) {
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '```'+ label + '``` label not set, so deployment did not happen, no need to destroy environment ...'
              })
              return
            }


            let cloud = title.match(/^Deploy Octocat Generator on (.*)/)[1]

            const issuePayload = JSON.parse(process.env.ISSUE_PAYLOAD);
            const customer = issuePayload[" Customer"]
            
            let customerNormalized = customer.replace(/[^a-zA-Z0-9_\-]*/g, '')
            let gprUrl='docker.pkg.github.com/'+context.repo.owner.toLowerCase()+'/'+context.repo.repo.toLowerCase()+'/octocat-generator-docker:'+customerNormalized
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ @' + context.actor + ', destroying deployment in ' + cloud + ' for ' + customer + ' (docker image ' + gprUrl + ' ) now ...'
            })
            github.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'destroy-in-'+cloud.toLowerCase(),
              client_payload: { customer: customer, cloud: cloud, gprUrl: gprUrl, issue: context.issue.number }
            })
