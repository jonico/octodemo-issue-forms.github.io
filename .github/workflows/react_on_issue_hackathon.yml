on:
  issues:
    types: [opened]
name: IssueOps - Demo [Hackathon]
jobs:
  act-on-issue:
    runs-on: ubuntu-latest
    if:  ( startsWith(github.event.issue.title, 'demo') || startsWith(github.event.issue.title, 'reset') ) && contains(github.event.issue.labels.*.name, 'hackathon')
    steps:
      - name: Get Token
        id: get_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.OCTODEMO_GITHUB_IO_HACKATHON_BOT_APP_ID }}
          application_private_key: ${{ secrets.OCTODEMO_GITHUB_IO_HACKATHON_BOT_PEM }}

      - name: Checkout
        uses: actions/checkout@v1

      - name: Run Issue form parser
        id: parse
        uses: peter-murray/issue-forms-body-parser@v1.0.0
        with:
          issue_id: ${{ github.event.issue.number }}
          separator: '###'
          label_marker_start: ' '
          label_marker_end: ' '
  
      - name: Log PLATFORM
        run: echo "PLATFORM=${{ fromJSON(steps.parse.outputs.payload)[' Platform'] }}"      

      - name: Reset demo if a demo or reset issue was opened
        run: ./scripts/reset-demo-hackathon.sh "${ISSUE_BODY}" "${{ github.event.issue.number }}"
        env:
          GITHUB_COM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OCTO_ORG: ${{ github.event.repository.owner.login }}
          OCTO_REPO : ${{ github.event.repository.name }}
          OCTO_UX_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          PLATFORM: ${{ fromJSON(steps.parse.outputs.payload)[' Platform'] }}
          THE_CUSTOMER: ${{ fromJSON(steps.parse.outputs.payload)[' Customer'] }}
      - name: Create customer branch if a demo issue issue was opened
        if:  startsWith(github.event.issue.title, 'demo')
        run: ./scripts/code-feature-hackathon.sh "${ISSUE_BODY}" "${{ github.event.issue.number }}"
        env:
          GITHUB_APP_TOKEN: ${{ steps.get_token.outputs.token }}
          GITHUB_COM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OCTO_ORG: ${{ github.event.repository.owner.login }}
          OCTO_REPO : ${{ github.event.repository.name }}
          OCTO_UX_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ github.event.issue.body }}  
          PLATFORM: ${{ fromJSON(steps.parse.outputs.payload)[' Platform'] }}
          THE_CUSTOMER: ${{ fromJSON(steps.parse.outputs.payload)[' Customer'] }}
